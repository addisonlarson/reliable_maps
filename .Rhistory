for (row in 1:nrow(ethnTrct)) {
ethnTrct[row, i + idx] <- rnorm(1, ethnTrct$pct[[row]], ethnTrct$sd[[row]])
}
}
# Display random outcomes with same no classes and class scheme
rand <- ethnTrct %>%
select(pct, starts_with("s_")) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . < 0, 0))) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . > max(pct), max(pct)))) %>%
drop_na()
idx <- ncol(rand) - 1
eBreaks <- seq(min(rand$pct), max(rand$pct), length.out = 5)
eBreaks[1] <- 0; eBreaks[5] <- 100
for (i in 2:idx){
plot(rand[i], breaks = eBreaks, border = NA, main = NULL)
}
# Number of classes
error_class <- c("0.6% / 5.5%",
"1.7% / 20.3%",
"2.9% / 21.5%",
"4.5% / 29.8%",
"6.2% / 33.2%",
"8.2% / 40.4%")
for (j in 2:7){
# We use j + 1 because seq includes minimum and maximum
eBreaks <- seq(min(ethnTrct$pct, na.rm = TRUE),
max(ethnTrct$pct, na.rm = TRUE),
length.out = j + 1)
plot(ethnTrct["pct"], breaks = eBreaks, border = NA, main = error_class[j - 1])
}
error_class <- c("0.6% Overall, 5.5% Max Class",
"1.7% Overall, 20.3% Max Class",
"2.9% Overall, 21.5% Max Class",
"4.5% Overall, 29.8% Max Class",
"6.2% Overall, 33.2% Max Class",
"8.2% Overall, 40.4% Max Class")
for (j in 2:7){
# We use j + 1 because seq includes minimum and maximum
eBreaks <- seq(min(ethnTrct$pct, na.rm = TRUE),
max(ethnTrct$pct, na.rm = TRUE),
length.out = j + 1)
plot(ethnTrct["pct"], breaks = eBreaks, border = NA, main = error_class[j - 1])
}
error_class <- c("17.3% Overall, 31.2% Max Class",
"37.2% Overall, 57.9% Max Class",
"4.5% Overall, 29.8% Max Class")
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5, border = NA, main = error_class[1])
plot(ethnTrct["pct"], breaks = "quantile", nbreaks = 5, border = NA, main = error_class[2])
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[3])
bgVals <- read.csv(here("outputs", "ethn_bg.csv")) %>%
select(pct, moe) %>%
mutate(pct = pct * 100) %>%
drop_na()
write.csv(bgVals, here("outputs", "ethn_bg_Autoreporter.csv"), row.names = FALSE)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[1])
error_class <- c("4.5% Overall, 29.8% Max Class",
"10.9% Overall, 49.8% Max Class")
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[1])
plot(ethnBg["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[2])
jpeg(here("figures", "test.jpg"), width = 700, height = 400)
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5, border = NA, main = error_class[1])
dev.off()
jpeg(here("figures", "test.jpg"), width = 2000, height = 1000)
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5, border = NA, main = error_class[1])
dev.off()
png(here("figures", "test.png"), width = 10, height = 7.5, units = "in", res = 600)
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5, border = NA, main = error_class[1])
dev.off()
png(here("figures", "test.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5, border = NA, main = error_class[1])
dev.off()
# Before other things, compute expected classification errors
library(sf); library(tidyverse); library(here)
trctVals <- read.csv(here("outputs", "ethn_trct.csv")) %>%
select(pct, moe) %>%
mutate(pct = pct * 100) %>%
drop_na()
write.csv(trctVals, here("outputs", "ethn_trct_Autoreporter.csv"), row.names = FALSE)
bgVals <- read.csv(here("outputs", "ethn_bg.csv")) %>%
select(pct, moe) %>%
mutate(pct = pct * 100) %>%
drop_na()
write.csv(bgVals, here("outputs", "ethn_bg_Autoreporter.csv"), row.names = FALSE)
# Now, for making visuals
ethnBg <- st_read(here("outputs", "./ethn_orig_bg.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
# Generate random outcomes based on estimate and MOE
alternatives <- 20; idx <- ncol(ethnTrct)
for(i in 1:alternatives){
ethnTrct[i + idx] <- 0
colnames(ethnTrct)[i + idx] <- paste0("s_", i)
for (row in 1:nrow(ethnTrct)) {
ethnTrct[row, i + idx] <- rnorm(1, ethnTrct$pct[[row]], ethnTrct$sd[[row]])
}
}
# Display random outcomes with same no classes and class scheme
rand <- ethnTrct %>%
select(pct, starts_with("s_")) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . < 0, 0))) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . > max(pct), max(pct)))) %>%
drop_na()
idx <- ncol(rand) - 1
eBreaks <- seq(min(rand$pct), max(rand$pct), length.out = 5)
eBreaks[1] <- 0; eBreaks[5] <- 100
for (i in 2:idx){
png(here("figures", paste0("rand_", i - 1, ".png")), width = 10, height = 7.5, units = "in", res = 500)
plot(rand[i], breaks = eBreaks, border = NA, main = NULL)
dev.off()
}
# Overall = overall map error for the scheme
# Max class = maximum expected classification error for a single class
error_class <- c("0.6% Overall, 5.5% Max Class",
"1.7% Overall, 20.3% Max Class",
"2.9% Overall, 21.5% Max Class",
"4.5% Overall, 29.8% Max Class",
"6.2% Overall, 33.2% Max Class",
"8.2% Overall, 40.4% Max Class")
for (j in 2:7){
# We use j + 1 because seq includes minimum and maximum
eBreaks <- seq(min(ethnTrct$pct, na.rm = TRUE),
max(ethnTrct$pct, na.rm = TRUE),
length.out = j + 1)
png(here("figures", paste0("cn_", j - 1, ".png")), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = eBreaks, border = NA, main = error_class[j - 1])
dev.off()
}
# Classification scheme
error_class <- c("17.3% Overall, 31.2% Max Class",
"37.2% Overall, 57.9% Max Class",
"4.5% Overall, 29.8% Max Class")
png(here("figures", "cb_jenks.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5, border = NA, main = error_class[1])
dev.off()
png(here("figures", "cb_quantile.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "quantile", nbreaks = 5, border = NA, main = error_class[2])
dev.off()
png(here("figures", "cb_equal.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[3])
dev.off()
error_class <- c("4.5% Overall, 29.8% Max Class",
"10.9% Overall, 49.8% Max Class")
png(here("figures", "geo_trct.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[1])
dev.off()
png(here("figures", "geo_bg.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnBg["pct"], breaks = "equal", nbreaks = 5, border = NA, main = error_class[2])
dev.off()
rm(list=ls())
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "High",
cv > 12 & cv <= 40 ~ "Medium",
cv > 40 ~ "Low"))
# Smaller pop have less reliability
ethnTrct %>% group_by(popCat) %>%
summarize(cvMean = mean(cv, na.rm = TRUE),
cvMedian = median(cv, na.rm = TRUE))
# In this case, sample rate doesn't make much of a difference
ethnTrct %>% group_by(popSampCat) %>%
summarize(cvMean = mean(cv, na.rm = TRUE),
cvMedian = median(cv, na.rm = TRUE))
# But the percentage of Hispanic residents in the tract *does* make a difference
plot(ethnTrct["cvCat"])
plot(ethnTrct["pct"])
png(here("figures", "hisp_cvCat.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["cvCat"], border = NA, main = NULL)
dev.off()
png(here("figures", "hisp_pct.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], border = NA, main = NULL)
dev.off()
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L"))
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
forcats::fct_relevel(cvCat, "H", "M", "L")
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
mutate_at(cvCat, as.factor) %>%
forcats::fct_relevel(cvCat, "H", "M", "L")
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
mutate_at(c("cvCat"), as.factor) %>%
forcats::fct_relevel(cvCat, "H", "M", "L")
f <- factor(c("a", "b", "c", "d"))
fct_relevel(f, "c")
fct_relevel(f, "c", "d", "a", "b")
str(ethnTrct)
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
mutate_at(c("cvCat"), as.factor)
str(ethnTrct)
levels(ethnTrct$cvCat)
mutate_at(c("cvCat"), fct_relevel(.))
ethnTrct %<>% mutate_at(c("cvCat"), fct_relevel(.))
f <- factor("H", "M", "L")
ethnTrct %<>% mutate_at(c("cvCat"), fct_relevel(., f))
fct_relevel(levels(ethnTrct$cvCat))
fct_relevel(levels(ethnTrct$cvCat), "H", "M", "L")
fct_relevel(ethnTrct$cvCat, "H", "M", "L")
potentially <- factor("H", "M", "L")
ethnTrct %<>% mutate_at(c("cvCat"), fct_relevel(., "H", "M", "L"))
ethnTrct %<>% mutate_at(c("cvCat"), fct_relevel(levels(.), "H", "M", "L"))
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
mutate_at(c("cvCat"), as.factor)
ethnTrct %<>% mutate_at(c("cvCat"), fct_relevel(levels(.), "H", "M", "L"))
library(tidyverse); library(sf); library(here); library(magrittr)
# Does reliability change according to population, sample rate, distance from city center?
# TRACT
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
mutate_at(c("cvCat"), as.factor)
ethnTrct %>%
mutate_at(c("cvCat"), fct_relevel("H", "M", "L") %>% levels())
ethnTrct$cvCat %>% fct_relevel("H", "M", "L") %>% levels()
levels(ethnTrct$cvCat)
ethnTrct$cvCat <- ethnTrct$cvCat %>% fct_relevel("H", "M", "L") %>% levels()
levels(ethnTrct$cvCat) <- ethnTrct$cvCat %>% fct_relevel("H", "M", "L") %>% levels()
ethnTrct %>% group_by(popCat) %>%
summarize(cvMean = mean(cv, na.rm = TRUE),
cvMedian = median(cv, na.rm = TRUE))
# In this case, sample rate doesn't make much of a difference
ethnTrct %>% group_by(popSampCat) %>%
summarize(cvMean = mean(cv, na.rm = TRUE),
cvMedian = median(cv, na.rm = TRUE))
# But the percentage of Hispanic residents in the tract *does* make a difference
png(here("figures", "hisp_cvCat.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["cvCat"], border = NA, main = NULL)
dev.off()
# ggplot this later?
plot(ethnTrct$pct, ethnTrct$cv)
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point()
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point() + theme_minimal()
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point() +
geom_smooth() + theme_minimal()
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point()
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point() + geom_smooth()
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point() + geom_smooth(se = FALSE)
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point() + geom_smooth(color = "darkblue")
ggplot(ethnTrct, aes(x = pct, y = cv)) + geom_point(color = "gray") + geom_smooth(color = "darkblue")
ggplot(ethnTrct, aes(x = pct, y = cv)) +
geom_point(color = "gray") +
geom_smooth(color = "darkblue") +
labs(title = "Relationship of CV and Percentage Estimate by Tract",
x = "Pct. Estimated Hispanic Residents",
y = "Pct. CV")
ggplot(ethnTrct, aes(x = pct, y = cv)) +
geom_point(color = "gray") +
geom_smooth(color = "darkblue") +
labs(title = "Relationship of CV and Percentage Estimate by Tract",
x = "Pct. Estimated Hispanic Residents",
y = "Pct. CV") +
theme_minimal()
png(here("figures", "hisp_cvRel.png"), width = 10, height = 7.5, units = "in", res = 500)
ggplot(ethnTrct, aes(x = pct, y = cv)) +
geom_point(color = "gray") +
geom_smooth(color = "darkblue") +
labs(title = "Relationship of CV and Percentage Estimate by Tract",
x = "Pct. Estimate, Hispanic Residents",
y = "Pct. CV") +
theme_minimal()
dev.off()
