output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Download and unzip NTA file
# url <- "https://data.cityofnewyork.us/api/geospatial/d3qk-pfyz?method=export&format=Shapefile"
# download.file(url, here("downloads", "nta.zip"), mode = "wb")
# unzip(here("downloads", "nta.zip"), exdir = here("downloads"))
# Find NTA filename (changes with each DL)
file_id <- paste0("./", list.files(here("downloads"), pattern = "*.shp"))
nyc_nta <- st_read(here("downloads", file_id))
cust_pal <- palette(rep_len(c("#F3EEF3", "#BDC9DE", "#70A8D1", "#2B8DBC", "#04598F"), 195))
plot(nyc_nta["ntaname"],
pal = cust_pal,
border = "white", main = NULL)
cust_pal <- palette(rep_len(c("#F3EEF3", "#BDC9DE", "#70A8D1", "#2B8DBC", "#04598F"), 195))
plot(nyc_nta["ntaname"],
pal = cust_pal,
border = "white", main = NULL)
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Now, for making visuals
ethnBg <- st_read(here("outputs", "./ethn_orig_bg.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
noClasses <- 5
eqIntervalBreaks <- seq(from = min(ethnTrct$pct),
to = max(ethnTrct$pct),
by = (max(ethnTrct$pct) - min(ethnTrct$pct)) / noClasses)
ethnTrct$pct
ethnTrct %<>% drop_na(.)
ethnTrct <- drop_na(ethnTrct)
noClasses <- 5
eqIntervalBreaks <- seq(from = min(ethnTrct$pct),
to = max(ethnTrct$pct),
by = (max(ethnTrct$pct) - min(ethnTrct$pct)) / noClasses)
errorTest <- ethnTrct %>%
mutate(classCode = cut(pct, labels = FALSE,
breaks = eqIntervalBreaks,
include.lowest = TRUE, right = TRUE),
lowerBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[1:length(eqIntervalBreaks) - 1]),
include.lowest = TRUE, right = TRUE),
upperBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[2:length(eqIntervalBreaks)]),
include.lowest = TRUE, right = TRUE),
classCode = paste0("Class", classCode)
)
dat2 <- split(dat, dat$classCode)
errorTest2 <- split(errorTest, errorTest$classCode)
errorTest2[[1]]$lowerBound <- -Inf
errorTest2[[length(errorTest2)]]$upperBound <- Inf
View(errorTest2)
lowerBoundErrors <- lapply(errorTest2, lower)
upperBoundErrors <- lapply(errorTest2, upper)
# Bonus for example purposes: viz likelihood that an estimate is wrongly classed
# Obtain percentage lower-bound errors
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 6])),
mean = x[i][, 1], sd = x[i][, 3],
lower.tail = TRUE) * 100
}
# Obtain percentage upper-bound errors
upper <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 7])),
mean = x[i][, 1], sd = x[i][, 3],
lower.tail = FALSE) * 100
}
colnames(errorTest2[[1]])
# Bonus for example purposes: viz likelihood that an estimate is wrongly classed
# Obtain percentage lower-bound errors
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 12])),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = TRUE) * 100
}
# Obtain percentage upper-bound errors
upper <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 13])),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = FALSE) * 100
}
ethnTrct <- drop_na(ethnTrct)
noClasses <- 5
eqIntervalBreaks <- seq(from = min(ethnTrct$pct),
to = max(ethnTrct$pct),
by = (max(ethnTrct$pct) - min(ethnTrct$pct)) / noClasses)
errorTest <- ethnTrct %>%
mutate(classCode = cut(pct, labels = FALSE,
breaks = eqIntervalBreaks,
include.lowest = TRUE, right = TRUE),
lowerBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[1:length(eqIntervalBreaks) - 1]),
include.lowest = TRUE, right = TRUE),
upperBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[2:length(eqIntervalBreaks)]),
include.lowest = TRUE, right = TRUE),
classCode = paste0("Class", classCode)
)
errorTest2 <- split(errorTest, errorTest$classCode)
errorTest2[[1]]$lowerBound <- -Inf
errorTest2[[length(errorTest2)]]$upperBound <- Inf
lowerBoundErrors <- lapply(errorTest2, lower)
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 12])),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = TRUE) * 100
}
# Obtain percentage upper-bound errors
upper <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 13])),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = FALSE) * 100
}
ethnTrct <- drop_na(ethnTrct)
noClasses <- 5
eqIntervalBreaks <- seq(from = min(ethnTrct$pct),
to = max(ethnTrct$pct),
by = (max(ethnTrct$pct) - min(ethnTrct$pct)) / noClasses)
errorTest <- ethnTrct %>%
mutate(classCode = cut(pct, labels = FALSE,
breaks = eqIntervalBreaks,
include.lowest = TRUE, right = TRUE),
lowerBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[1:length(eqIntervalBreaks) - 1]),
include.lowest = TRUE, right = TRUE),
upperBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[2:length(eqIntervalBreaks)]),
include.lowest = TRUE, right = TRUE),
classCode = paste0("Class", classCode)
) %>%
st_set_geometry(NULL)
errorTest2 <- split(errorTest, errorTest$classCode)
errorTest2[[1]]$lowerBound <- -Inf
errorTest2[[length(errorTest2)]]$upperBound <- Inf
# Obtain percentage lower-bound errors
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 12])),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = TRUE) * 100
}
# Obtain percentage upper-bound errors
upper <- function(x, i){
pnorm(as.numeric(as.character(x[i][, 13])),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = FALSE) * 100
}
lowerBoundErrors <- lapply(errorTest2, lower)
upperBoundErrors <- lapply(errorTest2, upper)
View(lowerBoundErrors)
unlist(lowerBoundErrors)
errorTest$lb_error <- unlist(lowerBoundErrors)
summary(errorTest$lb_error)
errorTest$ub_error <- unlist(upperBoundErrors)
errorTest$tot_error <- errorTest$lb_error + errorTest$ub_error
ethnTrct$tot_error <- errorTest$tot_error
View(ethnTrct)
summary(ethnTrct$tot_error)
ethnTrct$tot_error <- 100 - errorTest$tot_error
summary(ethnTrct$tot_error)
ethnTrct$tot_error <- (100 - errorTest$tot_error)
ethnTrct$alpha <- ethnTrct$tot_error / 10
summary(ethnTrct$alpha)
ethnTrct$alpha <- ethnTrct$tot_error / 100
summary(ethnTrct$alpha)
plot(ethnTrct["pct"], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
alpha = ethnTrct["alpha"],
border = NA, main = "hi", reset = FALSE)
?pal
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = "hi", reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = sf.colors(5, alpha = ethnTrct["alpha"]),
border = NA, main = "hi", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = sf.colors(5, alpha = ethnTrct$alpha),
border = NA, main = "hi", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 4,
pal = sf.colors(5, alpha = ethnTrct$alpha),
border = NA, main = "hi", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal",
pal = sf.colors(5, alpha = ethnTrct$alpha),
border = NA, main = "hi", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[3], reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = "heyheyhey", reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = sf.colors(n = 5),
border = NA, main = "heyheyhey", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = sf.colors(n = 5, alpha = 0.3),
border = NA, main = "heyheyhey", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = sf.colors(n = 5, alpha = ethnTrct["alpha"]),
border = NA, main = "heyheyhey", reset = FALSE)
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
ggplot() + geom_sf(data = ethnTrct,
aes(fill = pct))
# png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
theme_set(theme_minimal())
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class))
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class)) +
scale_alpha_continuous(alpha)
ethnTrct$alp <- ethnTrct$tot_error / 100
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class, alpha = alp))
theme_set(theme_minimal())
png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class, alpha = alp)) +
ggtitle("Simultaneously map classification error and estimate")
dev.off()
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class, alpha = alp, color = NA)) +
ggtitle("Simultaneously map classification error and estimate")
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class, alpha = alp, color = NULL)) +
ggtitle("Simultaneously map classification error and estimate")
tot_error <- unlist(lowerBoundErrors) + unlist(upperBoundErrors)
summary(tot_error)
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class, color = class, alpha = alp)) +
ggtitle("Simultaneously map classification error and estimate")
png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
ethnTrct %>%
mutate(class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = class, color = class, alpha = alp)) +
ggtitle("Simultaneously map classification error and estimate")
dev.off()
ethnTrct$tot_error <- (100 - tot_error)
ethnTrct$Certainty <- ethnTrct$tot_error / 100
theme_set(theme_minimal())
png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
ethnTrct %>%
mutate(Class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = Class, color = Class, alpha = Certainty)) +
ggtitle("Simultaneously map classification error and estimate")
dev.off()
ethnTrct %>%
mutate(Class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = Class, color = Class, alpha = Certainty)) +
ggtitle("Simultaneously map classification error and estimate") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ethnTrct %>%
mutate(Class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = Class, color = Class, alpha = Certainty)) +
ggtitle("Simultaneously map classification error and estimate") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
ethnTrct %>%
mutate(Class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = Class, color = Class, alpha = Certainty)) +
ggtitle("Simultaneously map classification error and estimate") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
dev.off()
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i]$lowerBound)),
mean = x[i][, 8], sd = x[i][, 10],
lower.tail = TRUE) * 100
}
ethnTrct <- drop_na(ethnTrct)
errorTest <- ethnTrct %>%
mutate(classCode = cut(pct, labels = FALSE,
breaks = eqIntervalBreaks,
include.lowest = TRUE, right = TRUE),
lowerBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[1:length(eqIntervalBreaks) - 1]),
include.lowest = TRUE, right = TRUE),
upperBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[2:length(eqIntervalBreaks)]),
include.lowest = TRUE, right = TRUE),
classCode = paste0("Class", classCode)
) %>%
st_set_geometry(NULL)
# Compute errors by class / easiest to do when you split by class
errorTestL <- split(errorTest, errorTest$classCode)
errorTestL[[1]]$lowerBound <- -Inf
errorTestL[[length(errorTestL)]]$upperBound <- Inf
lowerBoundErrors <- lapply(errorTestL, lower)
rm(list=ls())
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Now, for making visuals
ethnBg <- st_read(here("outputs", "./ethn_orig_bg.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
# Bonus for example purposes: viz likelihood that an estimate is wrongly classed
# Select number of classes
noClasses <- 5
# Function for percentage lower-bound errors
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i]$lowerBound)),
mean = x[i]$pct, sd = x[i]$sd,
lower.tail = TRUE) * 100
}
# Function for percentage upper-bound errors
upper <- function(x, i){
pnorm(as.numeric(as.character(x[i]$upperBound)),
mean = x[i]$pct, sd = x[i]$sd,
lower.tail = FALSE) * 100
}
# Obtain breaks (just equal interval for now)
eqIntervalBreaks <- seq(from = min(ethnTrct$pct),
to = max(ethnTrct$pct),
by = (max(ethnTrct$pct) - min(ethnTrct$pct)) / noClasses)
# Drop NAs and prep data
ethnTrct <- drop_na(ethnTrct)
errorTest <- ethnTrct %>%
mutate(classCode = cut(pct, labels = FALSE,
breaks = eqIntervalBreaks,
include.lowest = TRUE, right = TRUE),
lowerBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[1:length(eqIntervalBreaks) - 1]),
include.lowest = TRUE, right = TRUE),
upperBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[2:length(eqIntervalBreaks)]),
include.lowest = TRUE, right = TRUE),
classCode = paste0("Class", classCode)
) %>%
st_set_geometry(NULL)
# Compute errors by class / easiest to do when you split by class
errorTestL <- split(errorTest, errorTest$classCode)
errorTestL[[1]]$lowerBound <- -Inf
errorTestL[[length(errorTestL)]]$upperBound <- Inf
lowerBoundErrors <- lapply(errorTestL, lower)
upperBoundErrors <- lapply(errorTestL, upper)
# Bonus for example purposes: viz likelihood that an estimate is wrongly classed
# Select number of classes
noClasses <- 5
# Function for percentage lower-bound errors
lower <- function(x, i){
pnorm(as.numeric(as.character(x[i]$lowerBound)),
mean = x[i]$pct, sd = x[i]$sd,
lower.tail = TRUE) * 100
}
# Function for percentage upper-bound errors
upper <- function(x, i){
pnorm(as.numeric(as.character(x[i]$upperBound)),
mean = x[i]$pct, sd = x[i]$sd,
lower.tail = FALSE) * 100
}
# Obtain breaks (just equal interval for now)
eqIntervalBreaks <- seq(from = min(ethnTrct$pct),
to = max(ethnTrct$pct),
by = (max(ethnTrct$pct) - min(ethnTrct$pct)) / noClasses)
# Drop NAs and prep data
ethnTrct <- drop_na(ethnTrct)
errorTest <- ethnTrct %>%
mutate(classCode = cut(pct, labels = FALSE,
breaks = eqIntervalBreaks,
include.lowest = TRUE, right = TRUE),
lowerBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[1:length(eqIntervalBreaks) - 1]),
include.lowest = TRUE, right = TRUE),
upperBound = cut(pct, breaks = eqIntervalBreaks,
labels = c(eqIntervalBreaks[2:length(eqIntervalBreaks)]),
include.lowest = TRUE, right = TRUE),
classCode = paste0("Class", classCode)
) %>%
st_set_geometry(NULL)
# Compute errors by class / easiest to do when you split by class
errorTestL <- split(errorTest, errorTest$classCode)
errorTestL[[1]]$lowerBound <- -Inf
errorTestL[[length(errorTestL)]]$upperBound <- Inf
lowerBoundErrors <- lapply(errorTestL, lower)
upperBoundErrors <- lapply(errorTestL, upper)
tot_error <- unlist(lowerBoundErrors) + unlist(upperBoundErrors)
# Append back
ethnTrct$tot_error <- (100 - tot_error)
ethnTrct$Certainty <- ethnTrct$tot_error / 100
theme_set(theme_minimal())
png(here("figures", "class_error.png"), width = 10, height = 7.5, units = "in", res = 500)
ethnTrct %>%
mutate(Class = cut_interval(pct, 5)) %>%
ggplot() + geom_sf(aes(fill = Class, color = Class, alpha = Certainty)) +
ggtitle("Simultaneously map classification error and estimate") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = "PA", county = 101, geography = "tract",
variables = "B03003_003",
output = "wide")
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = "PA", county = 101, geography = "tract",
variables = "B03003_003",
output = "wide")
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = "PA", county = 101, geography = "tract",
variables = "B03003_003")
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = "PA", county = 101, geography = "tract",
variables = "B03003_003")
head(trct)
trct <- trct %>%
select(estimate, moe) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = "PA", county = 101, geography = "tract", variables = "B03003_003")
head(trct)
trct <- trct %>%
select(estimate, moe) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
