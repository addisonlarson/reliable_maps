mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
alternatives <- 20; idx <- ncol(ethnBg)
for(i in 1:alternatives){
ethnBg[i + idx] <- 0
colnames(ethnBg)[i + idx] <- paste0("s_", i)
for (row in 1:nrow(ethnBg)) {
normval <- rnorm(1, ethnBg$pct[[row]], ethnBg$sd[[row]])
ethnBg[row, i + idx] <- ifelse(is.nan(normval), NA, normval)
}
}
# Display random outcomes with same no classes and class scheme
rand <- ethnBg %>%
select(pct, starts_with("s_")) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . < 0, 0))) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . > 100, 100)))
idx <- ncol(rand) - 1
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA. main = NULL)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(st_geometry(ethnCty), col = NA, border = "black", add = TRUE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(st_geometry(ethnCty))
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(st_geometry(ethnCty), col = NULL, add = TRUE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(st_geometry(ethnCty), col = NA, add = TRUE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(st_geometry(ethnCty), col = "red", border = "black", add = TRUE)
plot(st_geometry(ethnCty), col = "red", border = "black")
plot(st_geometry(ethnCty), col = NA, border = "black")
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL)
plot(st_geometry(ethnCty), col = NA, border = "black", add = TRUE, reset = FALSE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "black", add = TRUE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "darkgray", add = TRUE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
plot(rand[2], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
rm(list=ls())
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Before other things, compute expected classification errors
# Requires these specially formatted .csvs in online error calculator
trctVals <- read.csv(here("outputs", "ethn_trct.csv")) %>%
select(pct, moe) %>%
mutate(pct = pct * 100) %>%
drop_na()
write.csv(trctVals, here("outputs", "ethn_trct_Autoreporter.csv"), row.names = FALSE)
bgVals <- read.csv(here("outputs", "ethn_bg.csv")) %>%
select(pct, moe) %>%
mutate(pct = pct * 100) %>%
drop_na()
write.csv(bgVals, here("outputs", "ethn_bg_Autoreporter.csv"), row.names = FALSE)
# Now, for making visuals
ethnBg <- st_read(here("outputs", "./ethn_orig_bg.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
# Generate random outcomes based on estimate and MOE
alternatives <- 20; idx <- ncol(ethnBg)
for(i in 1:alternatives){
ethnBg[i + idx] <- 0
colnames(ethnBg)[i + idx] <- paste0("s_", i)
for (row in 1:nrow(ethnBg)) {
normval <- rnorm(1, ethnBg$pct[[row]], ethnBg$sd[[row]])
ethnBg[row, i + idx] <- ifelse(is.nan(normval), NA, normval)
}
}
# Display random outcomes with same no classes and class scheme
rand <- ethnBg %>%
select(pct, starts_with("s_")) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . < 0, 0))) %>%
mutate_at(vars(s_1:s_20), funs(replace(., . > 100, 100)))
idx <- ncol(rand) - 1
for (i in 2:idx){
png(here("figures", paste0("rand_", i - 1, ".png")), width = 10, height = 7.5, units = "in", res = 500)
plot(rand[i], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
}
# Number of classes
# Overall = overall map error for the scheme
# Max class = maximum expected classification error for a single class
error_class <- c(#"0.6% Overall Map Error, 5.5% Max. Class Error",
"1.7% Overall Map Error, 20.3% Max. Class Error",
"2.9% Overall Map Error, 21.5% Max. Class Error",
"4.5% Overall Map Error, 29.8% Max. Class Error",
"6.2% Overall Map Error, 33.2% Max. Class Error",
"8.2% Overall Map Error, 40.4% Max. Class Error")
for (j in 3:7){
# We use j + 1 because seq includes minimum and maximum
eBreaks <- seq(min(ethnTrct$pct, na.rm = TRUE),
max(ethnTrct$pct, na.rm = TRUE),
length.out = j + 1)
png(here("figures", paste0("cn_", j, ".png")), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = eBreaks,
pal = brewer.pal(j, "PuBu"),
border = NA, main = error_class[j - 2], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
}
# Classification scheme
error_class <- c("17.3% Overall Map Error, 31.2% Max. Class Error",
"37.2% Overall Map Error, 57.9% Max. Class Error",
"4.5% Overall Map Error, 29.8% Max. Class Error")
png(here("figures", "cb_jenks.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "jenks", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[1], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
png(here("figures", "cb_quantile.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "quantile", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[2], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
png(here("figures", "cb_equal.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[3], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
# Geography selected
error_class <- c("4.5% Overall Map Error, 29.8% Max. Class Error",
"10.9% Overall Map Error, 49.8% Max. Class Error")
png(here("figures", "geo_trct.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[1], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
png(here("figures", "geo_bg.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnBg["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[2], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Randomly select 2, 2, and 3
# From bottom, middle, and top tiers of equal interval choro
# ethnTrct <- read.csv(here("outputs", "ethn_orig_trct.csv")) %>%
#   mutate_at(c("GEOID"), as.character) %>%
#   mutate(pct = pct * 100,
#          sd = moe / 1.645,
#          cty = substr(GEOID, 3, 5),
#          plus = pct + moe,
#          minus = pct - moe) %>%
#   filter(cty == "101")
# bottom <- ethnTrct %>%
#   filter(pct <= 100 / 3) %>%
#   sample_n(., 2, replace = FALSE)
# middle <- ethnTrct %>%
#   filter(pct > 100 / 3 & pct <= 200 / 3) %>%
#   sample_n(., 2, replace = FALSE)
# top <- ethnTrct %>%
#   filter(pct > 200 / 3) %>%
#   sample_n(., 3, replace = FALSE)
# I like these estimates, so I'm saving them
# write.csv(bottom, here("outputs", "ex_b.csv"), row.names = FALSE)
# write.csv(middle, here("outputs", "ex_m.csv"), row.names = FALSE)
# write.csv(top, here("outputs", "ex_t.csv"), row.names = FALSE)
bottom <- read.csv(here("outputs", "ex_b.csv"))
middle <- read.csv(here("outputs", "ex_m.csv"))
top <- read.csv(here("outputs", "ex_t.csv"))
# Read geo file to make a single map
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(cty = substr(GEOID, 3, 5)) %>%
subset(cty == 101)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(cty = substr(GEOID, 3, 5)) %>%
subset(cty == 101)
primary = "#73A8D0"
secondary = "#2B8DBE"
tertiary = "#04598F"
light = "#F1EEF5" # (Only used as map background)
plot(st_geometry(ethnTrct), col = light, border = NA, primary = NULL)
plot(st_geometry(est), col = secondary, border = NA, add = TRUE)
est <- ethnTrct %>% subset(GEOID == top[1,]$GEOID)
png(here("figures", "p1_location.png"), width = 5, height = 5, units = "in", res = 500)
plot(st_geometry(ethnTrct), col = light, border = NA, primary = NULL)
plot(st_geometry(est), col = secondary, border = NA, add = TRUE)
dev.off()
plot(st_geometry(ethnTrct), col = light, border = NA, primary = NULL)
plot(st_geometry(est), col = secondary, border = NA, add = TRUE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
est <- ethnTrct %>% subset(GEOID == top[1,]$GEOID)
png(here("figures", "p1_location.png"), width = 5, height = 5, units = "in", res = 500)
plot(st_geometry(ethnTrct), col = light, border = NA, primary = NULL)
plot(st_geometry(est), col = secondary, border = NA, add = TRUE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
library(tidyverse); library(sf); library(here); library(magrittr); library(RColorBrewer)
# Does reliability change according to population, sample rate, distance from city center?
ethnTrct <- st_read(here("outputs", "./ethn_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918)
ethnAux <- read.csv(here("outputs", "aux_trct.csv")) %>%
mutate_at(c("GEOID"), as.character) %>%
select(-type)
ethnTrct %<>% dplyr::left_join(., ethnAux, by = "GEOID")
ethnCorr <- ethnTrct %>%
select(pct, relative, cv, landArea, popDens, popSamp, B01003_001E) %>%
st_set_geometry(NULL)
round(cor(ethnCorr, use = "pairwise.complete.obs"),3)
sampBreaks <- quantile(ethnTrct$popSamp, probs = seq(0, 1, 0.25), na.rm = TRUE)
# See http://help.arcgis.com/en/businessanalyst/apis/rest/reference/ACSVariables.html
# and https://svi.cdc.gov/Documents/Publications/CDC_ATSDR_SVI_Materials/SampleSizeError_v2.pdf
# for reliability criteria
ethnTrct %<>%
mutate(popCat = case_when(B01003_001E < 1000 ~ "Fewer than 1,000",
B01003_001E >= 1000 & B01003_001E < 3000 ~ "1,000-2,999",
B01003_001E >= 3000 & B01003_001E < 5000 ~ "3,000-4,999",
B01003_001E >= 5000 & B01003_001E < 7000 ~ "5,000-6,999",
B01003_001E >= 7000 ~ "7,000 or greater"),
popSampCat = case_when(popSamp < sampBreaks[2] ~ "Bottom Quartile",
popSamp >= sampBreaks[2] & popSamp < sampBreaks[3] ~ "Second Quartile",
popSamp >= sampBreaks[3] & popSamp < sampBreaks[4] ~ "Third Quartile",
popSamp >= sampBreaks[4] ~ "Top Quartile"),
cvCat = case_when(cv <= 12 ~ "H",
cv > 12 & cv <= 40 ~ "M",
cv > 40 ~ "L")) %>%
mutate_at(c("cvCat"), as.factor)
levels(ethnTrct$cvCat) <- ethnTrct$cvCat %>% fct_relevel("H", "M", "L") %>% levels()
# Smaller pop have less reliability
ethnTrct %>% group_by(popCat) %>%
summarize(cvMean = mean(cv, na.rm = TRUE),
cvMedian = median(cv, na.rm = TRUE))
# In this case, sample rate doesn't make much of a difference
ethnTrct %>% group_by(popSampCat) %>%
summarize(cvMean = mean(cv, na.rm = TRUE),
cvMedian = median(cv, na.rm = TRUE))
# But the percentage of Hispanic residents in the tract *does* make a difference
custom <- c("#8CAE68", "#F1EEF5", "#DFBF9F")
png(here("figures", "hisp_cvCat.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["cvCat"],
pal = custom,
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
png(here("figures", "hisp_pct.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = NULL, reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
cor(ethnTrct$pct, ethnTrct$cv)
png(here("figures", "hisp_cvRel.png"), width = 10, height = 7.5, units = "in", res = 500)
ggplot(ethnTrct, aes(x = pct, y = cv)) +
geom_point(color = "gray") +
geom_smooth(color = "#73A8D0") +
labs(title = "Relationship of CV and Percentage Estimate by Tract",
x = "Pct. Estimate, Hispanic Residents",
y = "Pct. CV") +
theme_minimal()
dev.off()
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Now, for making visuals
ethnBg <- st_read(here("outputs", "./ethn_orig_bg.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnTrct <- st_read(here("outputs", "./ethn_orig_trct.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
ethnCty <- st_read(here("outputs", "./ethn_orig_cty.shp")) %>%
mutate_at(c("GEOID"), as.character) %>%
st_set_crs(4326) %>%
st_transform(26918) %>%
mutate(pct = pct * 100,
sd = moe / 1.645)
# Geography selected
error_class <- c("4.5% Overall Map Error, 29.8% Max. Class Error",
"10.9% Overall Map Error, 49.8% Max. Class Error")
png(here("figures", "geo_trct.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnTrct["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[1], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
png(here("figures", "geo_bg.png"), width = 10, height = 7.5, units = "in", res = 500)
plot(ethnBg["pct"], breaks = "equal", nbreaks = 5,
pal = brewer.pal(5, "PuBu"),
border = NA, main = error_class[2], reset = FALSE)
plot(st_geometry(ethnCty), col = NA, border = "dimgray", add = TRUE)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = c("B03003_001", "B03003_003"),
geometry = TRUE, output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = c("B03003_001", "B03003_003"),
geometry = TRUE, output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
trct <- trct %>%
select(B03003_003E, B03003_003E) %>%
drop_na()
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
tail(trct)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus); library(tidyverse)
trct <- get_acs(state = c("PA", "NJ"), geography = "tract",
variables = "B03003_003",
output = "wide") %>%
mutate(stcty = substr(GEOID, 1, 5)) %>%
subset(stcty %in% c("34005", "34007", "34015", "34021",
"42017", "42029", "42045", "42091", "42101")) %>%
select(-stcty)
head(trct)
trct <- trct %>%
select(B03003_003E, B03003_003M) %>%
drop_na()
head(trct)
setwd("D:/alarson")
write.csv(trct, file = "export.csv", row.names = FALSE)
library(sf); library(tidyverse); library(here); library(RColorBrewer)
# Download and unzip NTA file
# url <- "https://data.cityofnewyork.us/api/geospatial/d3qk-pfyz?method=export&format=Shapefile"
# download.file(url, here("downloads", "nta.zip"), mode = "wb")
# unzip(here("downloads", "nta.zip"), exdir = here("downloads"))
# Find NTA filename (changes with each DL)
file_id <- paste0("./", list.files(here("downloads"), pattern = "*.shp"))
nyc_nta <- st_read(here("downloads", file_id))
cust_pal <- palette(rep_len(c("#F3EEF3", "#BDC9DE", "#70A8D1", "#2B8DBC", "#04598F"), 195))
plot(nyc_nta["ntaname"],
pal = cust_pal,
border = "white", main = NULL)
cust_pal <- palette(rep_len(c("#F3EEF3", "#BDC9DE", "#70A8D1", "#2B8DBC", "#04598F"), 195))
plot(nyc_nta["ntaname"],
pal = cust_pal,
border = "white", main = NULL)
